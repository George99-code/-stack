#include <iostream>
#define x 50
using namespace std;
class stack
{
private: 
	int arr[x];
    int top = -1;
public:
	stack() { top = -1; };
	void push(int y);
	int pop();
	int is_empty();
	int is_full();
	int stack_top() { return arr[top]; }
};
int stack ::is_empty()
{
	if (top == -1)
		return 1;
	return 0;
}
int stack ::is_full()
{
	if (top == x - 1)
		return 1;
	return 0;
}
void stack ::push(int item)
{
	if (is_full())
	{
		cout << "stack_static is overflow";
		return;
	}
	top++;
	arr[top] = item;
}
int stack::pop()
{
	if (is_empty())
	{
		cout << "stack_static is underflow";
		return -1;
	}
	int item = arr[top];
	top--;
	return item;
}
int predence(char c)
{
	switch (c)
	{
	case '*':
	case '/':
		return 1;
	case '+':
	case '-':
		return 2;
	}
}
void main()
{
	char c;
	stack s;
	int i=0, j=0;
	char inf[100], post[100];
	cout << "Enter a Infix Expression " << endl;
	cin >> inf;
		inf[i + 1] = '0';
		inf[i--] = ')';
		while (i > 0)
		{
			inf[i] = inf[i - 1];
			i--;
		}
		inf[i] = '(';
		while (inf[i++] != 0)
		{
			if (inf[i] == '(')
			{
				s.push(inf[i]);
			}
			else if (inf[i] >= 'a' && inf[i] <= 'z')
			{
				post[j] = inf[i];
				j++;
			}
			else if (inf[i] == '+' || inf[i] == '-' || inf[i] == '*' || inf[i] == '/' )
			{
				while (s.stack_top() == '+' || s.stack_top() == '-' || s.stack_top() == '*' || s.stack_top() == '/')
				{
					if (predence(s.stack_top)) >= predence(inf[i]))
					{
					post[j] = s.pop();
					j++;
					}
					else
					{
						break;
					}
					s.push(inf[i]);
				}
			}
			else if (inf[i] == ')')
			{
				while ((c=s.pop())!='(')
				{
					post[j++] = c;
				}
			}
			i++;
		}
		post[j] = '0';
		cout << post << endl;
}